from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from app.crud.workouts import create_workout, get_workout_by_id, get_all_workouts, update_workout, delete_workout
from app.schemas.workouts import WorkoutCreate, WorkoutResponse
from app.core.db import get_async_session
from app.models.users import User
from app.core.security import get_current_user

router = APIRouter(
    prefix='/workouts', 
    tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è']
    )


@router.post(
        '/',
        tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è'],
        summary='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
        response_model=WorkoutResponse
        )
async def create_new_workout(
    workout_data: WorkoutCreate,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'''
    return await create_workout(session, workout_data, current_user.id)


@router.get(
        '/{workout_id}',
        tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è'],
        summary='–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID',
        response_model=WorkoutResponse
        )
async def get_workout(
    workout_id: int,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ ID'''
    return await get_workout_by_id(session, workout_id)


@router.get(
        '/',
        tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è'],
        summary='–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
        response_model=List[WorkoutResponse]
        )
async def get_user_workouts(
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    return await get_all_workouts(session, current_user.id)


@router.put(
        '/update/{workout_id}',
        tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è'],
        summary='–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
        response_model=WorkoutResponse
        )
async def update_existing_workout(
    workout_id: int,
    workout_data: WorkoutCreate,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ'''
    return await update_workout(session, workout_id, workout_data)


@router.delete(
        '/delete/{workout_id}',
        tags=['–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ üèÉ‚Äç‚ôÇÔ∏è'],
        summary='–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        response_model=dict
        )
async def remove_workout(
    workout_id: int, 
    session: AsyncSession = Depends(get_async_session), 
    current_user: User = Depends(get_current_user)
    ):
    '''–£–¥–∞–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏'''
    await delete_workout(session, workout_id)
    return {'message': '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'}
