from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from app.schemas.meals import MealCreate, MealResponse, MealUpdate
from app.crud.meals import create_meal, get_meal_by_id, get_all_meals, update_meal, delete_meal
from app.core.security import get_current_user
from app.core.db import get_async_session
from app.models.users import User

router = APIRouter(
    prefix='/meals',
    tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ']
    )

@router.get(
        '/all',
        tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ'],
        summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏',
        response_model=List[MealResponse]
        )
async def get_all_meals_route(
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–≤–æ–∏—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏'''
    return await get_all_meals(session, current_user.id)


@router.post(
        '/add',
        tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ'],
        summary='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏',
        response_model=MealResponse
        )
async def add_meal(
    meal_data: MealCreate,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤'''
    return await create_meal(session, meal_data, current_user.id)


@router.get(
        '/get/{meal_id}',
        tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ'],
        summary='–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏ –ø–æ ID',
        response_model=MealResponse
        )
async def get_meal(
    meal_id: int,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ —Å —Ä–∞—Å—á–µ—Ç–æ–º –∫–∞–ª–æ—Ä–∏–π, –±–µ–ª–∫–æ–≤, –∂–∏—Ä–æ–≤ –∏ —É–≥–ª–µ–≤–æ–¥–æ–≤'''
    return await get_meal_by_id(session, meal_id)


@router.put(
    '/update/{meal_id}',
    tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ'],
    summary='–û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏',
    response_model=MealResponse
)
async def update_meal_route(
    meal_id: int,
    meal_data: MealUpdate,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–∏–µ–º –ø–∏—â–∏ (–∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ –≤—Ä–µ–º—è)'''
    return await update_meal(session, meal_id, meal_data, current_user.id)


@router.delete(
        '/delete/{meal_id}',
        tags=['–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ üçΩ'],
        summary='–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–µ–º –ø–∏—â–∏'
        )
async def remove_meal(
    meal_id: int,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
):
    '''–£–¥–∞–ª—è–µ—Ç –ø—Ä–∏–µ–º –ø–∏—â–∏ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
    await delete_meal(session, meal_id)
    return {'message': f'–ü—Ä–∏–µ–º –ø–∏—â–∏ —Å ID {meal_id} —É–¥–∞–ª–µ–Ω'}

