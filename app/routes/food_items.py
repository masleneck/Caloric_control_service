from fastapi import APIRouter, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List

from app.models.users import User
from app.schemas.food_items import FoodCreate, FoodResponse
from app.crud.food_items import create_food, get_food_by_id, get_all_foods, update_food, delete_food
from app.core.security import get_current_user, is_admin
from app.core.db import get_async_session

router = APIRouter(
    prefix='/food',
    tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè']
    )


@router.post(
        '/add',
        tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè'],
        summary='–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
        response_model=FoodResponse
        )
async def add_food(
    food_data: FoodCreate,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –≤ –±–∞–∑—É'''
    return await create_food(session, food_data)


@router.get(
        '/get/{food_id}',
        tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè'],
        summary='–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID',
        response_model=FoodResponse
        )
async def get_food(
    food_id: int,
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ'''
    return await get_food_by_id(session, food_id)


@router.get(
        '/list',
        tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè'],
        summary='–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤',
        response_model=List[FoodResponse]
        )
async def get_food_list(
    session: AsyncSession = Depends(get_async_session),
    current_user: User = Depends(get_current_user)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –ª—é–±–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤'''
    return await get_all_foods(session)


@router.put(
        '/update/{food_id}',
        tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè'],
        summary='üü¢ –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ',
        response_model=FoodResponse
        )
async def update_food_info(
    food_id: int,
    food_data: FoodCreate,
    session: AsyncSession = Depends(get_async_session),
    admin_user: User = Depends(is_admin)  
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ'''
    return await update_food(session, food_id, food_data)


@router.delete(
        '/delete/{food_id}',
        tags=['–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è üçè'],
        summary='üü¢ –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'
        )
async def delete_food_item(
    food_id: int,
    session: AsyncSession = Depends(get_async_session),
    admin_user: User = Depends(is_admin)
    ):
    '''–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç'''
    await delete_food(session, food_id)
    return {'message': f'–ü—Ä–æ–¥—É–∫—Ç —Å ID {food_id} —É–¥–∞–ª–µ–Ω'}
