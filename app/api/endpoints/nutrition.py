from fastapi import APIRouter, Depends, HTTPException, Body, Path
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.exc import SQLAlchemyError
from datetime import datetime, date
from typing import List
from loguru import logger
from app.models import User, Meal, Mealtime
from app.dependencies.auth_dep import get_current_user
from app.dependencies.dao_dep import get_session_with_commit, get_session_without_commit
from app.schemas.meals import MealCreate, MealDetailResponse, MealCreateResponse
from app.api.dao import MealDAO, MealFoodItemDAO, FoodItemDAO
from app.core.exceptions import MealNotFound, ForbiddenException, InvalidMealData, FoodItemNotFound

router = APIRouter(
    prefix='/meals',
    tags=['–ü—Ä–∏—ë–º—ã –ø–∏—â–∏ üçΩ']
    )

# -------------------------------------------
# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
# -------------------------------------------

async def _check_meal_ownership(
    session: AsyncSession, 
    meal_id: int, 
    user_id: int
) -> Meal:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø—Ä–∏—ë–º –ø–∏—â–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.'''
    meal_dao = MealDAO(session)
    meal = await meal_dao.get_meal_by_id(meal_id)
    if not meal:
        raise MealNotFound(f'–ü—Ä–∏—ë–º –ø–∏—â–∏ —Å ID {meal_id} –Ω–µ –Ω–∞–π–¥–µ–Ω')
    if meal.user_id != user_id:
        raise ForbiddenException()
    return meal

# -------------------------------------------
# –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã
# -------------------------------------------

@router.post('/add', response_model=MealCreateResponse, summary='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏')
async def create_meal(
    data: MealCreate,
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_with_commit),
):
    if not await FoodItemDAO(session).find_one_by_fields(id=data.food_item_id):
        raise FoodItemNotFound(data.food_item_id)

    try:
        meal_id = await MealDAO(session).create_meal(
            user_id=current_user.id,
            food_item_id=data.food_item_id,
            mealtime=data.mealtime,
            meal_date=data.meal_date,
            quantity=data.quantity
        )
        return {
            'message': f'–ü—Ä–∏–µ–º –ø–∏—â–∏ –ø–æ–¥ ID {meal_id} –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!',
            'meal_id': meal_id
        }
    except SQLAlchemyError as e:
        raise HTTPException(500, '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')



@router.delete('/delete/{meal_id}', summary='–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏')
async def delete_meal(
    meal_id: int,
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_with_commit),
):
    '''
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–∏—ë–º –ø–∏—â–∏ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏.
    '''
    await _check_meal_ownership(session, meal_id, current_user.id)
    meal_dao = MealDAO(session)
    await meal_dao.delete_meal(meal_id)
    return {'message': '–ü—Ä–∏—ë–º –ø–∏—â–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'}



@router.get('/get_date/{date}', summary='–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –¥–∞—Ç—É', response_model=List[MealDetailResponse])
async def get_meals_by_date(
    date: date = Path(..., description='–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD'),  # –¢–∏–ø date!
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_without_commit),
):
    try:
        meals = await MealDAO(session).get_meals_by_date(
            user_id=current_user.id,
            target_date=date  # –ü–µ—Ä–µ–¥–∞–µ–º date –Ω–∞–ø—Ä—è–º—É—é
        )
        if not meals:
            raise MealNotFound('–ü—Ä–∏–µ–º—ã –ø–∏—â–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
        return meals
    except SQLAlchemyError as e:
        logger.error(f'Database error: {e}')
        raise HTTPException(500, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö')



@router.post('/{meal_id}/add_food', summary='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∫ –ø—Ä–∏–µ–º—É –ø–∏—â–∏')
async def add_food_to_meal(
    meal_id: int,
    food_item_id: int = Body(..., gt=0),
    quantity: float = Body(..., gt=0),
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_with_commit),
):
    await _check_meal_ownership(session, meal_id, current_user.id)
    
    food_item = await FoodItemDAO(session).get_food_item_by_id(food_item_id)
    if not food_item:
        raise FoodItemNotFound(food_item_id)
    
    try:
        await MealFoodItemDAO(session).add_food_to_meal(
            meal_id=meal_id,
            food_item_id=food_item_id,
            quantity=quantity
        )
        return {'message': '–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω'}
    except InvalidMealData as e:
        raise HTTPException(400, detail=str(e))


@router.delete('/{meal_id}/remove_food/{food_item_id}', summary='–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏')
async def remove_food_from_meal(
    meal_id: int,
    food_item_id: int,
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_with_commit),
):
    '''
    –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç –∏–∑ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏.
    '''
    await _check_meal_ownership(session, meal_id, current_user.id)
    meal_food_item_dao = MealFoodItemDAO(session)
    await meal_food_item_dao.remove_food_from_meal(
        meal_id=meal_id,
        food_item_id=food_item_id
    )
    return {'message': '–ü—Ä–æ–¥—É–∫—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω'}


@router.put('/update/{meal_id}', summary='–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏')
async def update_meal(
    meal_id: int,
    mealtime: Mealtime | None = None,
    meal_date: datetime | None = None,
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_with_commit),
):
    '''
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏ (–≤—Ä–µ–º—è –∏–ª–∏ —Ç–∏–ø).
    '''
    await _check_meal_ownership(session, meal_id, current_user.id)
    meal_dao = MealDAO(session)
    await meal_dao.update_meal(
        meal_id=meal_id,
        mealtime=mealtime,
        meal_date=meal_date
    )
    return {'message': '–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'}