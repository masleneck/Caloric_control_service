from fastapi import APIRouter, Response, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from app.models import User
from app.utils.token_utils import set_tokens
from app.dependencies.auth_dep import get_current_user, get_current_admin_user, check_refresh_token
from app.dependencies.dao_dep import get_session_with_commit, get_session_without_commit
from app.schemas.users import UserRegister, UserAuth, UserInfo, ConfidentialInfoResponse, UpdateConfidentialInfoRequest
from app.data.dao import UserDAO

router = APIRouter(
    prefix='/auth',
    tags=['–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è üõ°Ô∏è']
)

@router.post('/register/', summary='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def register_user(
    user_data: UserRegister,
    session: AsyncSession = Depends(get_session_with_commit)
) -> dict:
    """–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    dao = UserDAO(session)
    return await dao.register_user(user_data)

@router.post('/login/', summary='–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def auth_user(
    response: Response,
    user_data: UserAuth,
    session: AsyncSession = Depends(get_session_without_commit)
) -> dict:
    """–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    dao = UserDAO(session)
    user = await dao.authenticate_user(user_data)
    set_tokens(response, user.id)
    return {'ok': True, 'message': '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!'}

@router.post('/logout', summary='–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
async def logout(response: Response) -> dict:
    """–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã."""
    response.delete_cookie('user_access_token')
    response.delete_cookie('user_refresh_token')
    return {'message': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã'}

@router.get('/all_users/', summary='üö® –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö')
async def get_all_users(
    session: AsyncSession = Depends(get_session_with_commit),
    current_user: User = Depends(get_current_admin_user)
) -> list[UserInfo]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö."""
    dao = UserDAO(session)
    return await dao.get_all_users()

@router.post('/refresh', summary='–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã')
async def process_refresh_token(
    response: Response,
    user: User = Depends(check_refresh_token)
) -> dict:
    """–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω—ã."""
    set_tokens(response, user.id)
    return {'message': '–¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã'}




@router.get('/confidential_info', response_model=ConfidentialInfoResponse)
async def get_confidential_info(
    current_user: User = Depends(get_current_user),
    session: AsyncSession = Depends(get_session_without_commit)
):
    '''–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
    dao = UserDAO(session)
    return await dao.get_confidential_info(current_user)


# @router.put('/update_confidential_info')
# async def update_confidential_info(
#     credentials: UpdateConfidentialInfoRequest,
#     current_user: User = Depends(get_current_user),
#     session: AsyncSession = Depends(get_session_with_commit)
# ):
#     '''–û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
#     dao = UserDAO(session)
#     return await dao.update_confidential_info(current_user, credentials)