from datetime import datetime, timedelta
from typing import Optional
from jose import JWTError, jwt
from fastapi import HTTPException, Depends
from passlib.context import CryptContext
from sqlalchemy.ext.asyncio import AsyncSession
from fastapi.security import OAuth2PasswordBearer

from app.crud.users import get_user_by_username
from app.models.users import UserRole, User
from app.core.db import get_async_session
from app.core.config import settings


# –•–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–æ–ª–µ–π 
pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')

def get_password_hash(password: str) -> str:
    '''–•–µ—à–∏—Ä—É–µ—Ç –ø–∞—Ä–æ–ª—å.'''
    return pwd_context.hash(password)

def verify_password(plain_password: str, hashed_password: str) -> bool:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ö–µ—à–∞ –∏ –ø–∞—Ä–æ–ª—è.'''
    return pwd_context.verify(plain_password, hashed_password)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º OAuth2 
oauth2_scheme = OAuth2PasswordBearer(tokenUrl='/auth/token')


# –†–∞–±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–∞–º–∏ 
def create_access_token(
        data: dict, 
        expires_delta: timedelta = timedelta(minutes=settings.access_token_expire_minutes)
        ) -> str:
    '''–°–æ–∑–¥–∞–µ—Ç JWT-—Ç–æ–∫–µ–Ω.'''
    to_encode = data.copy()
    to_encode.update({'exp': datetime.utcnow() + expires_delta})
    return jwt.encode(to_encode, settings.secret_key, algorithm=settings.algorithm)

def decode_token(token: str) -> str:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç username.'''
    try:
        payload = jwt.decode(token, settings.secret_key, algorithms=[settings.algorithm])
        username: Optional[str] = payload.get('sub')
        if not username:
            raise HTTPException(status_code=401, detail='–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω')
        return username
    except JWTError:
        raise HTTPException(status_code=401, detail='–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
async def get_current_user(
        token: str = Depends(oauth2_scheme),
        session: AsyncSession = Depends(get_async_session)
        ) -> User:
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'''
    username = decode_token(token)
    user = await get_user_by_username(session, username)
    if not user:
        raise HTTPException(status_code=404, detail='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return user


async def is_admin(
        current_user: User = Depends(get_current_user)
        ) -> User:
    '''–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º.'''
    if current_user.role != UserRole.ADMIN:
        raise HTTPException(status_code=403, detail='–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤')
    return current_user





'''
JWT (JSON Web Token) —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ —Ç—Ä—ë—Ö —á–∞—Å—Ç–µ–π, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã—Ö —Ç–æ—á–∫–∞–º–∏ 
HEADER.PAYLOAD.SIGNATURE
1. HEADER (–ó–∞–≥–æ–ª–æ–≤–æ–∫)
–°–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–µ —Ç–æ–∫–µ–Ω–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è.
{
  "alg": "HS256",
  "typ": "JWT"
}
2. PAYLOAD (–ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞)
–°–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ —à–∏—Ñ—Ä—É–µ—Ç—Å—è!).
{
  "sub": "user1", # ID –∏–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
  "exp": 1708887600 #  –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ (–≤ Unix time).
}
3. SIGNATURE (–ü–æ–¥–ø–∏—Å—å)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞.
–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
HMACSHA256(
    base64UrlEncode(HEADER) + "." + base64UrlEncode(PAYLOAD),
    SECRET_KEY
)
–û–Ω–∞ –∑–∞—â–∏—â–∞–µ—Ç —Ç–æ–∫–µ–Ω –æ—Ç –ø–æ–¥–º–µ–Ω—ã: –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏—Ç Payload, –ø–æ–¥–ø–∏—Å—å –∏–∑–º–µ–Ω–∏—Ç—Å—è.
üî• –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç JWT?
1Ô∏è‚É£ –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∞–µ—Ç —Ç–æ–∫–µ–Ω –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É (POST /auth/token).
2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–æ–∫–µ–Ω –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞:

Authorization: Bearer <—Ç–æ–∫–µ–Ω>
3Ô∏è‚É£ –°–µ—Ä–≤–µ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å (SIGNATURE) –∏ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å (exp).
4Ô∏è‚É£ –ï—Å–ª–∏ –≤—Å—ë —Ö–æ—Ä–æ—à–æ, —Å–µ—Ä–≤–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

Payload –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω, –∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω! –ï–≥–æ –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å, –Ω–æ –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏.

–ö–∞–∫ —Å–µ—Ä–≤–µ—Ä —É–∑–Ω–∞—ë—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω?
üîπ –í –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫:
Authorization: Bearer <—Ç–æ–∫–µ–Ω>
üîπ –°–µ—Ä–≤–µ—Ä –¥–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ get_current_user) –∏ –ø–æ–ª—É—á–∞–µ—Ç sub (–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
üîπ –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤–∞–ª–∏–¥–Ω—ã, —Å–µ—Ä–≤–µ—Ä –¥–∞—ë—Ç –¥–æ—Å—Ç—É–ø.
üîπ –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –ø—Ä–æ—Å—Ä–æ—á–µ–Ω –∏–ª–∏ –ø–æ–¥–¥–µ–ª–∞–Ω ‚Üí 401 Unauthorized.
'''