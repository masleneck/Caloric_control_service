"""Initial revision

Revision ID: 2542f5b2ec2e
Revises: 
Create Date: 2025-03-09 03:03:53.632824

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '2542f5b2ec2e'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('food_items',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('calories', sa.Float(), nullable=False),
    sa.Column('proteins', sa.Float(), nullable=False),
    sa.Column('fats', sa.Float(), nullable=False),
    sa.Column('carbs', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('testquestions',
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('type', sa.String(), nullable=False),
    sa.Column('options', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.Column('role', sa.Enum('USER', 'ADMIN', name='role',create_type=False), server_default=sa.text("'USER'"), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('workout_info',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('duration_minutes', sa.Integer(), nullable=False),
    sa.Column('calories_burned', sa.Float(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meals',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('mealtime', sa.Enum('BREAKFAST', 'LUNCH', 'DINNER', 'NOT_STATED', name='mealtime',create_type=False), server_default=sa.text("'NOT_STATED'"), nullable=False),
    sa.Column('meal_date', sa.DateTime(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('profiles',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('last_name', sa.String(), nullable=True),
    sa.Column('gender', sa.Enum('MALE', 'FEMALE', 'NOT_STATED', name='gender',create_type=False), server_default=sa.text("'NOT_STATED'"), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('height', sa.Integer(), nullable=False),
    sa.Column('goal', sa.Enum('LOSE_WEIGHT', 'KEEPING_FIT', 'GAIN_MUSCLE_MASS', 'NOT_STATED', name='currentgoal',create_type=False), server_default=sa.text("'NOT_STATED'"), nullable=False),
    sa.Column('birthday_date', sa.DateTime(), nullable=True),
    sa.Column('activity_level', sa.Enum('SEDENTARY', 'LIGHT', 'MODERATE', 'ACTIVE', 'ATHLETE', 'NOT_STATED', name='activitylevel',create_type=False), server_default=sa.text("'NOT_STATED'"), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('testresults',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('question_id', sa.Integer(), nullable=False),
    sa.Column('answer', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['testquestions.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('workouts',
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('workout_info_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workout_info_id'], ['workout_info.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('meal_food_items',
    sa.Column('meal_id', sa.Integer(), nullable=False),
    sa.Column('food_item_id', sa.Integer(), nullable=False),
    sa.Column('quantity', sa.Float(), nullable=False),
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.ForeignKeyConstraint(['food_item_id'], ['food_items.id'], ),
    sa.ForeignKeyConstraint(['meal_id'], ['meals.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('meal_food_items')
    op.drop_table('workouts')
    op.drop_table('testresults')
    op.drop_table('profiles')
    op.drop_table('meals')
    op.drop_table('workout_info')
    op.drop_table('users')
    op.drop_table('testquestions')
    op.drop_table('food_items')
    # ### end Alembic commands ###
    op.execute('DROP TYPE IF EXISTS role')
    op.execute('DROP TYPE IF EXISTS activitylevel')
    op.execute('DROP TYPE IF EXISTS currentgoal')
    op.execute('DROP TYPE IF EXISTS gender')
    op.execute('DROP TYPE IF EXISTS mealtime')